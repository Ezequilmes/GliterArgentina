#!/usr/bin/env node

/**
 * Script para depurar la validaci√≥n de tokens FCM
 */

// Funci√≥n isValidFCMToken copiada del endpoint de administraci√≥n
function isValidFCMToken(token) {
  if (!token || typeof token !== 'string') {
    console.log('‚ùå Token inv√°lido: no es string o est√° vac√≠o');
    return false;
  }
  
  // Los tokens FCM reales tienen caracter√≠sticas espec√≠ficas:
  // - Longitud t√≠pica entre 140-180 caracteres (incluyendo 152)
  // - Contienen caracteres alfanum√©ricos, guiones y guiones bajos
  // - Comienzan con patrones espec√≠ficos de Firebase
  const fcmTokenPattern = /^[A-Za-z0-9_:-]+$/;
  
  if (!fcmTokenPattern.test(token)) {
    console.log('‚ùå Token inv√°lido: no cumple el patr√≥n alfanum√©rico');
    console.log('   Token:', token);
    console.log('   Caracteres inv√°lidos encontrados:', token.match(/[^A-Za-z0-9_-]/g));
    return false;
  }
  
  // Verificar longitud m√≠nima y m√°xima razonable
  if (token.length < 100 || token.length > 200) {
    console.log('‚ùå Token inv√°lido: longitud fuera de rango');
    console.log('   Longitud:', token.length);
    return false;
  }
  
  // Verificar que contenga el patr√≥n t√≠pico de Firebase (starts with device ID:APA91b...)
  if (!token.includes(':APA91b')) {
    console.log('‚ùå Token inv√°lido: no contiene :APA91b');
    return false;
  }
  
  console.log('‚úÖ Token v√°lido');
  return true;
}

// Tokens reales de Firestore
const realTokens = [
  "clyUfr1Af5tIE2lrs6Tmfm:APA91bFZXnlvKcQtVVi64ruADzSRkPsWKtRSvaB9l4olHSrZsv7DUmBwU_GHaFjuu-MPOdvVg4HXDanVPhCctNF7Gvd55gGpoWxsYOJjqJQsWL_rnzxfAbw",
  "eAAyjRj5e2zNiRGx205ujq:APA91bHPlC-_0FpkVdW70c1_ezGZJ6Z1PLLwpt3zY5Yoj-urvTzp053CQoAM3uuCU9-oJQmcb_8zsTQigdDGafmw35fMD-iXbuWYx1HjdXqoC8nWG6a3u5k"
];

console.log('üîç Depurando validaci√≥n de tokens FCM...\n');

realTokens.forEach((token, index) => {
  console.log(`\nüìã Token ${index + 1}:`);
  console.log(`   Token completo: ${token}`);
  console.log(`   Longitud: ${token.length}`);
  console.log(`   Contiene ':APA91b': ${token.includes(':APA91b')}`);
  console.log(`   Resultado validaci√≥n:`);
  
  const isValid = isValidFCMToken(token);
  console.log(`   ‚úÖ/‚ùå: ${isValid ? 'V√ÅLIDO' : 'INV√ÅLIDO'}`);
});

// Simular el proceso de filtrado como lo hace el endpoint
console.log('\n\nüîç Simulando proceso de filtrado del endpoint:');

const mockUserTokens = [
  "clyUfr1Af5tIE2lrs6Tmfm:APA91bFZXnlvKcQtVVi64ruADzSRkPsWKtRSvaB9l4olHSrZsv7DUmBwU_GHaFjuu-MPOdvVg4HXDanVPhCctNF7Gvd55gGpoWxsYOJjqJQsWL_rnzxfAbw",
  "eAAyjRj5e2zNiRGx205ujq:APA91bHPlC-_0FpkVdW70c1_ezGZJ6Z1PLLwpt3zY5Yoj-urvTzp053CQoAM3uuCU9-oJQmcb_8zsTQigdDGafmw35fMD-iXbuWYx1HjdXqoC8nWG6a3u5k"
];

console.log('Tokens del usuario:', mockUserTokens);
console.log('Filtrando tokens v√°lidos...');

const validTokens = mockUserTokens.filter(isValidFCMToken);

console.log('Tokens v√°lidos encontrados:', validTokens.length);
console.log('Tokens v√°lidos:', validTokens);
console.log('Tokens filtrados (inv√°lidos):', mockUserTokens.length - validTokens.length);