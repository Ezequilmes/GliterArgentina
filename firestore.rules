rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function userInList(userList) {
      return request.auth != null && userList.hasAny([request.auth.uid]);
    }
    
    function isChatParticipant(chatId) {
      return request.auth != null && (
        // For direct chats, check if the chatId contains the current user's UID
        (chatId.matches('direct_.*') && chatId.matches('.*' + request.auth.uid + '.*')) ||
        // For existing chats, check the document
        (exists(/databases/$(database)/documents/chats/$(chatId)) && 
         get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]))
      );
    }
    
    function isChatParticipantFromResource() {
      return request.auth != null && 
        (resource.data.participants.hasAny([request.auth.uid]) || 
         resource.data.participantIds.hasAny([request.auth.uid]));
    }
    
    // Users collection - users can read all users but only write their own
    match /users/{userId} {
      allow read: if isAuthenticated();
      // Allow owner full write; allow other authenticated users to add themselves to matches or receivedSuperLikes arrays
      allow write: if isOwner(userId) || (
        isAuthenticated() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['matches', 'receivedSuperLikes'])
      );
    }
    
    // Chat collection rules
    match /chats/{chatId} {
      // Allow list queries for authenticated users (Firestore will filter results based on read rules)
      allow list: if isAuthenticated();
      
      // Allow read if user is a participant
      allow read: if isAuthenticated() && isChatParticipant(chatId);
      
      // Allow create if user is one of the participants in the new document
      // This is crucial for automatic chat creation
      allow create: if isAuthenticated() && 
        request.resource.data.participants.hasAny([request.auth.uid]) &&
        request.resource.data.participants.size() == 2 &&
        request.resource.data.chatType == 'direct';
      
      // Allow update if user is a participant (for lastMessage, unreadCount, etc.)
      allow update: if isAuthenticated() && isChatParticipant(chatId);
      
      // Allow delete only if user is a participant (optional, might want to restrict this)
      allow delete: if isAuthenticated() && isChatParticipant(chatId);

      // Messages subcollection
      match /messages/{messageId} {
        // Allow read if user is a chat participant
        allow read: if isAuthenticated() && isChatParticipant(chatId);
        
        // Allow create if user is a chat participant and is the sender
        allow create: if isAuthenticated() && 
          isChatParticipant(chatId) &&
          request.auth.uid == request.resource.data.senderId;
        
        // Allow update if user is the sender or receiver (for editing messages, reactions, read status, etc.)
        allow update: if isAuthenticated() && 
          isChatParticipant(chatId) &&
          (request.auth.uid == resource.data.senderId || 
           request.auth.uid == resource.data.receiverId);
        
        // Allow delete if user is the sender
        allow delete: if isAuthenticated() && 
          isChatParticipant(chatId) &&
          request.auth.uid == resource.data.senderId;
      }
    }
    
    // Messages collection (top-level) - accessible to chat participants
    match /messages/{messageId} {
      // Allow read if the requesting user is authenticated and either:
      // 1. The message has no chatId (legacy)
      // 2. The user is the sender or receiver of the message
      allow read: if isAuthenticated() && (
        resource.data.chatId == null ||
        resource.data.senderId == request.auth.uid ||
        resource.data.receiverId == request.auth.uid
      );

      // Allow create if the requester is authenticated and is the sender
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId;

      // Allow updates/deletes
      // Sender can update/delete any field.
      // Receiver can update the 'read' field or 'readBy' array to mark message as read.
      allow update: if isAuthenticated() && (
        // Sender has full control
        request.auth.uid == resource.data.senderId ||
        // Receiver may update 'read' flag or 'readBy' array
        (request.auth.uid == resource.data.receiverId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readBy']))
      );
      // Delete restricted to sender
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.senderId;
    }
    
    // Chat typing indicators
    match /chatTyping/{typingId} {
      allow read, write: if isAuthenticated();
      allow create: if isAuthenticated();
    }

    // Typing collection (used in code)
    match /typing/{typingId} {
      allow read, write: if isAuthenticated();
      allow create: if isAuthenticated();
    }
    
    // User preferences and settings
    match /userPreferences/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Location data - users can manage their own location
    match /locations/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Public locations for discovery - readable by authenticated users
    match /publicLocations/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Reports - users can create reports, only admins can read all
    match /reports/{reportId} {
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.reporterId;
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.reporterId || 
         request.auth.token.admin == true);
    }
    
    // Likes - users can create and read their own likes
    match /likes/{likeId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.fromUserId;
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.fromUserId;
    }

    // Verification Requests - users can create their own request and read their own; admins can read all
    match /verificationRequests/{requestId} {
      // User can create a request for themselves
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      // User can read their own request; admins can read any
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || request.auth.token.admin == true);
      // Prevent ordinary users from updating/deleting; allow only admins
      allow update, delete: if isAuthenticated() && request.auth.token.admin == true;
    }
    
    // Matches - accessible to both participants
    match /matches/{matchId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.user1Id || 
         request.auth.uid == resource.data.user2Id);
      allow write: if isAuthenticated() && 
        (request.auth.uid == resource.data.user1Id || 
         request.auth.uid == resource.data.user2Id);
      allow create: if isAuthenticated() && 
        (request.auth.uid == request.resource.data.user1Id || 
         request.auth.uid == request.resource.data.user2Id);
    }
    
    // Notifications - users can read their own notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // FCM tokens for push notifications
    match /fcmTokens/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // User sessions and activity
    match /userSessions/{sessionId} {
      allow read, write: if isAuthenticated();
    }
    
    // Online status - users can manage their own status and read others'
    match /onlineStatus/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // NUEVAS REGLAS PARA EXCLUSIVOS
    // Helper function para verificar si el usuario es admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Exclusives collection - cards de modelos y masajistas
    match /exclusives/{exclusiveId} {
      // Lectura: usuarios autenticados pueden ver cards activas, admins pueden ver todas
      allow read: if isAuthenticated() && (resource.data.subscriptionStatus == 'active' || isAdmin());
      
      // Lista: usuarios autenticados pueden listar exclusivos
      allow list: if isAuthenticated();
      
      // Creación: admins pueden crear con cualquier estado, usuarios normales solo con 'pending'
      allow create: if isAuthenticated() && (
        isAdmin() || 
        request.resource.data.subscriptionStatus == 'pending'
      );
      
      // Actualización y eliminación: solo admins
      allow update, delete: if isAdmin();
    }
    
    // Promo codes collection - códigos promocionales
    match /promo_codes/{codeId} {
      // Lectura: todos pueden leer códigos activos para validación, admins ven todos
      allow read: if resource.data.active == true || isAdmin();
      
      // Escritura: solo admins pueden crear, actualizar y eliminar códigos
      allow create, update, delete: if isAdmin();
    }
    
    // Promo usage logs - registro de uso de códigos promocionales
    match /promo_usage/{usageId} {
      // Lectura: solo admins pueden ver logs de uso
      allow read: if isAdmin();
      
      // Creación: usuarios autenticados pueden crear logs cuando usan códigos
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      
      // Actualización y eliminación: solo admins
      allow update, delete: if isAdmin();
    }
    
    // App configuration - configuración general de la app
    match /app_config/{configId} {
      // Lectura: configuración pública accesible a todos
      allow read: if true;
      
      // Escritura: solo admins pueden modificar configuración
      allow write: if isAdmin();
    }
    
    // Analytics collection - estadísticas y métricas
    match /analytics/{analyticsId} {
      // Solo admins pueden leer y escribir estadísticas
      allow read, write: if isAdmin();
    }
    
    // Exclusive registrations - registros del formulario de exclusivos
    match /exclusive-registrations/{registrationId} {
      // Lectura: solo admins pueden ver los registros
      allow read: if isAdmin();
      
      // Creación: cualquier usuario puede enviar un registro
      allow create: if true;
      
      // Actualización: solo admins pueden cambiar el estado (aprobar/rechazar)
      allow update: if isAdmin();
      
      // Eliminación: solo admins pueden eliminar registros
      allow delete: if isAdmin();
    }
  }
}
